{"remainingRequest":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/newsmay/Desktop/NewFolder/novi/src/components/Triggers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/newsmay/Desktop/NewFolder/novi/src/components/Triggers.vue","mtime":1566288039260},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/cache-loader/dist/cjs.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/babel-loader/lib/index.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vuetify-loader/lib/loader.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/cache-loader/dist/cjs.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vue-loader/lib/index.js","mtime":1565775065000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  API_BASE_URL,\n  TRIGGERS,\n  TRIGGER,\n  CHANNEL,\n  ACTIVE,\n  MESSAGE\n} from \"../constants/index.js\";\nimport axios from \"axios\";\nimport ClickOutside from \"vue-click-outside\";\nimport { Current_User_Role, THEME_ID, THEME } from \"../constants/index.js\";\nimport { User_Email } from \"../constants/index.js\";\nimport { ACCESS_TOKEN, LANGUAGE } from \"../constants/index.js\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + localStorage.getItem(ACCESS_TOKEN)\n};\nexport default {\n  name: \"Triggers\",\n  data() {\n    return {\n      triggersData: [],\n      rowSize: 20, //Number of rows\n      pagesSize: 1, //Number of pages\n      page: 1, //current active page\n      menu: false,\n      rowSizesValue: [5, 10, 20],\n      sortType: \"desc\",\n      sortByValue: \"createdAt\",\n      textNoti: \"\",\n      errorOccured: false,\n      showNoti: false\n    };\n  },\n\n  filters: {\n    shortDate(value) {\n      let dateVar = new Date(value);\n      let dataVar2 = dateVar.toDateString();\n      let data = dataVar2.substring(4);\n      return data;\n    },\n    activeView(value) {\n      if (value == true) return \"Active\";\n      else return \"Not active\";\n    }\n  },\n\n  mounted: function() {\n    if (localStorage.getItem(THEME) == \"light\") {\n      document.getElementById(\"header\").style.backgroundColor = \"white\";\n      document.getElementById(\"Triggers\").style.backgroundColor = \"white\";\n    } else if (localStorage.getItem(THEME) == \"dark\") {\n      document.getElementById(\"header\").style.backgroundColor = \"black\";\n      document.getElementById(\"Triggers\").style.backgroundColor = \"black\";\n    }\n    if (localStorage.getItem(LANGUAGE) != \"en\") {\n      document.getElementsByTagName(\"H1\")[0].innerHTML = localStorage.getItem(\n        TRIGGERS\n      );\n      document.getElementsByTagName(\"H5\")[0].innerHTML = localStorage.getItem(\n        MESSAGE\n      );\n      document.getElementsByTagName(\"H5\")[1].innerHTML = localStorage.getItem(\n        TRIGGER\n      );\n      document.getElementsByTagName(\"H5\")[2].innerHTML = localStorage.getItem(\n        CHANNEL\n      );\n      document.getElementsByTagName(\"H5\")[3].innerHTML = localStorage.getItem(\n        ACTIVE\n      );\n    }\n    this.create();\n  },\n\n  methods: {\n    showTriggerForm() {\n      this.$router.push(\"/dashboard/triggers/newTrigger\");\n    },\n\n    async reloadTriggers() {\n      var pg = this.page - 1;\n      try {\n        const res = await axios.get(\n          API_BASE_URL +\n            \"/api/triggers?page=\" +\n            pg +\n            \"&size=\" +\n            this.rowSize +\n            \"&sort=\" +\n            this.sortByValue +\n            \",\" +\n            this.sortType\n        );\n\n        if (res.data.totalPages < this.page)\n          this.changePage(res.data.totalPages);\n\n        this.triggersData = res.data.content;\n        this.pagesSize = res.data.totalPages;\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    showNotification(value) {\n      if (value == -1) {\n        this.textNoti = \"Some error have occured\";\n        this.errorOccured = true;\n      } else {\n        this.errorOccured = false;\n        this.textNoti = \"Succes\";\n      }\n      this.showNoti = !this.showNoti;\n      setTimeout(this.closeNoti, 1500);\n      {\n      }\n    },\n\n    closeNoti() {\n      this.showNoti = false;\n    },\n\n    async editTrigger(id) {\n      this.$router.push(\"/dashboard/triggers/updateTrigger/\" + id);\n    },\n\n    async deleteTrigger(id) {\n      await axios.delete(API_BASE_URL + \"/api/triggers/\" + id);\n      var pg = this.page - 1;\n      try {\n        const res = await axios.get(\n          API_BASE_URL +\n            \"/api/triggers?page=\" +\n            pg +\n            \"&size=\" +\n            this.rowSize +\n            \"&sort=\" +\n            this.sortByValue +\n            \",\" +\n            this.sortType\n        );\n\n        if (res.data.numberOfElements == 0) {\n          if (this.page != 1) this.changePage(this.page - 1);\n        }\n        this.messagesData = res.data.content;\n        if (res.data.totalPages == 0) this.pagesSize = 1;\n        else this.pagesSize = res.data.totalPages;\n        this.reloadTriggers();\n        this.showNotification(200);\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    toggleMenu() {\n      this.menu = !this.menu;\n    },\n\n    hideMenu() {\n      this.menu = false;\n    },\n\n    setRows(value) {\n      if (value != this.rowSize) {\n        this.rowSize = value;\n        this.reloadTriggers();\n      }\n      this.menu = !this.menu;\n    },\n\n    changePage(nextPage) {\n      this.page = nextPage;\n      this.reloadTriggers(nextPage - 1);\n    },\n\n    async create() {\n      try {\n        const res = await axios.get(\n          API_BASE_URL + \"/api/triggers?page=0&size=\" + this.rowSize\n        );\n        this.triggersData = res.data.content;\n        if (res.data.totalPages == 0) this.pagesSize = 1;\n        else this.pagesSize = res.data.totalPages;\n        this.rowSize = res.data.size;\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    changeSortType() {\n      if (this.sortType == \"asc\") this.sortType = \"desc\";\n      else this.sortType = \"asc\";\n    },\n\n    sortBy(value) {\n      if (this.sortType == \"asc\") this.sortType = \"desc\";\n      else this.sortType = \"asc\";\n\n      this.sortByValue = value;\n      this.reloadTriggers();\n    }\n  },\n  directives: {\n    ClickOutside\n  }\n};\n",{"version":3,"sources":["Triggers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Triggers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"Triggers\" class=\"tabcontent\">\n    <div id=\"header\">\n      <h1>Triggers</h1>\n    </div>\n    <router-view @reload-triggers=\"reloadTriggers()\" @show-notification=\"showNotification($event)\"></router-view>\n\n    <div id=\"divlist\">\n      <ul id=\"list\">\n        <li id=\"title-li\">\n          <div class=\"column1 column\">\n            <h5>Message</h5>\n            <p>\n              <i class=\"material-icons\" @click=\"sortBy('message.title')\">arrow_drop_down</i>\n            </p>\n          </div>\n\n          <div class=\"column2 column\">\n            <h5>Trigger</h5>\n            <p>\n              <i class=\"material-icons\" @click=\"sortBy('createdAt')\">arrow_drop_down</i>\n            </p>\n          </div>\n\n          <div class=\"column3 column\">\n            <h5>Channel</h5>\n            <p>\n              <i class=\"tooltip material-icons\" @click=\"sortBy('channel')\">arrow_drop_down</i>\n            </p>\n          </div>\n\n          <div class=\"column5 column\">\n            <h5>Active</h5>\n            <p>\n              <i class=\"tooltip material-icons\" @click=\"sortBy('active')\">arrow_drop_down</i>\n            </p>\n          </div>\n\n          <div class=\"column4 column\">\n            <p>\n              <i class=\"material-icons\">filter_list</i>\n            </p>\n          </div>\n        </li>\n\n        <li v-for=\"trigger in triggersData\" :key=\"trigger.triggerId\">\n          <div class=\"linear1\"></div>\n          <div class=\"linear2\"></div>\n          <div class=\"column1 column\">\n            <p>{{ trigger.message.text }}</p>\n          </div>\n          <div class=\"column2 column\">\n            <p>{{ trigger.createdAt | shortDate }}</p>\n          </div>\n          <div class=\"column3 column\">\n            <p>{{ trigger.channel }}</p>\n          </div>\n\n          <div class=\"column5 column\">\n            <p>{{ trigger.active | activeView }}</p>\n          </div>\n          <div class=\"column4 column\">\n            <i class=\"material-icons\" @click=\"editTrigger(trigger.triggerId)\">create</i>\n            <i class=\"material-icons\" @click=\"deleteTrigger(trigger.triggerId)\">delete</i>\n          </div>\n        </li>\n      </ul>\n    </div>\n\n    <div id=\"footer\">\n      <button id=\"footer-btn\" @click=\"toggleMenu\" v-click-outside=\"hideMenu\">{{ this.rowSize }} Rows</button>\n      <div id=\"menu\" v-show=\"menu\">\n        <div\n          class=\"menu-article\"\n          v-for=\"rowValue in rowSizesValue\"\n          :key=\"rowValue\"\n          @click=\"setRows(rowValue)\"\n        >{{ rowValue }}</div>\n      </div>\n\n      <div class=\"text-xs-center\">\n        <v-pagination v-model=\"page\" :length=\"pagesSize\" :total-visible=\"5\" @input=\"changePage\"></v-pagination>\n      </div>\n    </div>\n\n    <button @click=\"showTriggerForm\" id=\"btn\">+</button>\n\n    <div\n      id=\"notification\"\n      v-show=\"showNoti\"\n      :class=\"{redBorder: errorOccured, greenBorder: !errorOccured}\"\n    >\n      <input\n        type=\"text\"\n        v-model=\"textNoti\"\n        readonly\n        :class=\"{redText: errorOccured, greenText: !errorOccured}\"\n      />\n      <button\n        @click=\"showNotification\"\n        :class=\"{redBackground: errorOccured, greenBackground: !errorOccured}\"\n      >OK</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  API_BASE_URL,\n  TRIGGERS,\n  TRIGGER,\n  CHANNEL,\n  ACTIVE,\n  MESSAGE\n} from \"../constants/index.js\";\nimport axios from \"axios\";\nimport ClickOutside from \"vue-click-outside\";\nimport { Current_User_Role, THEME_ID, THEME } from \"../constants/index.js\";\nimport { User_Email } from \"../constants/index.js\";\nimport { ACCESS_TOKEN, LANGUAGE } from \"../constants/index.js\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + localStorage.getItem(ACCESS_TOKEN)\n};\nexport default {\n  name: \"Triggers\",\n  data() {\n    return {\n      triggersData: [],\n      rowSize: 20, //Number of rows\n      pagesSize: 1, //Number of pages\n      page: 1, //current active page\n      menu: false,\n      rowSizesValue: [5, 10, 20],\n      sortType: \"desc\",\n      sortByValue: \"createdAt\",\n      textNoti: \"\",\n      errorOccured: false,\n      showNoti: false\n    };\n  },\n\n  filters: {\n    shortDate(value) {\n      let dateVar = new Date(value);\n      let dataVar2 = dateVar.toDateString();\n      let data = dataVar2.substring(4);\n      return data;\n    },\n    activeView(value) {\n      if (value == true) return \"Active\";\n      else return \"Not active\";\n    }\n  },\n\n  mounted: function() {\n    if (localStorage.getItem(THEME) == \"light\") {\n      document.getElementById(\"header\").style.backgroundColor = \"white\";\n      document.getElementById(\"Triggers\").style.backgroundColor = \"white\";\n    } else if (localStorage.getItem(THEME) == \"dark\") {\n      document.getElementById(\"header\").style.backgroundColor = \"black\";\n      document.getElementById(\"Triggers\").style.backgroundColor = \"black\";\n    }\n    if (localStorage.getItem(LANGUAGE) != \"en\") {\n      document.getElementsByTagName(\"H1\")[0].innerHTML = localStorage.getItem(\n        TRIGGERS\n      );\n      document.getElementsByTagName(\"H5\")[0].innerHTML = localStorage.getItem(\n        MESSAGE\n      );\n      document.getElementsByTagName(\"H5\")[1].innerHTML = localStorage.getItem(\n        TRIGGER\n      );\n      document.getElementsByTagName(\"H5\")[2].innerHTML = localStorage.getItem(\n        CHANNEL\n      );\n      document.getElementsByTagName(\"H5\")[3].innerHTML = localStorage.getItem(\n        ACTIVE\n      );\n    }\n    this.create();\n  },\n\n  methods: {\n    showTriggerForm() {\n      this.$router.push(\"/dashboard/triggers/newTrigger\");\n    },\n\n    async reloadTriggers() {\n      var pg = this.page - 1;\n      try {\n        const res = await axios.get(\n          API_BASE_URL +\n            \"/api/triggers?page=\" +\n            pg +\n            \"&size=\" +\n            this.rowSize +\n            \"&sort=\" +\n            this.sortByValue +\n            \",\" +\n            this.sortType\n        );\n\n        if (res.data.totalPages < this.page)\n          this.changePage(res.data.totalPages);\n\n        this.triggersData = res.data.content;\n        this.pagesSize = res.data.totalPages;\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    showNotification(value) {\n      if (value == -1) {\n        this.textNoti = \"Some error have occured\";\n        this.errorOccured = true;\n      } else {\n        this.errorOccured = false;\n        this.textNoti = \"Succes\";\n      }\n      this.showNoti = !this.showNoti;\n      setTimeout(this.closeNoti, 1500);\n      {\n      }\n    },\n\n    closeNoti() {\n      this.showNoti = false;\n    },\n\n    async editTrigger(id) {\n      this.$router.push(\"/dashboard/triggers/updateTrigger/\" + id);\n    },\n\n    async deleteTrigger(id) {\n      await axios.delete(API_BASE_URL + \"/api/triggers/\" + id);\n      var pg = this.page - 1;\n      try {\n        const res = await axios.get(\n          API_BASE_URL +\n            \"/api/triggers?page=\" +\n            pg +\n            \"&size=\" +\n            this.rowSize +\n            \"&sort=\" +\n            this.sortByValue +\n            \",\" +\n            this.sortType\n        );\n\n        if (res.data.numberOfElements == 0) {\n          if (this.page != 1) this.changePage(this.page - 1);\n        }\n        this.messagesData = res.data.content;\n        if (res.data.totalPages == 0) this.pagesSize = 1;\n        else this.pagesSize = res.data.totalPages;\n        this.reloadTriggers();\n        this.showNotification(200);\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    toggleMenu() {\n      this.menu = !this.menu;\n    },\n\n    hideMenu() {\n      this.menu = false;\n    },\n\n    setRows(value) {\n      if (value != this.rowSize) {\n        this.rowSize = value;\n        this.reloadTriggers();\n      }\n      this.menu = !this.menu;\n    },\n\n    changePage(nextPage) {\n      this.page = nextPage;\n      this.reloadTriggers(nextPage - 1);\n    },\n\n    async create() {\n      try {\n        const res = await axios.get(\n          API_BASE_URL + \"/api/triggers?page=0&size=\" + this.rowSize\n        );\n        this.triggersData = res.data.content;\n        if (res.data.totalPages == 0) this.pagesSize = 1;\n        else this.pagesSize = res.data.totalPages;\n        this.rowSize = res.data.size;\n      } catch (err) {\n        this.showNotification(-1);\n      }\n    },\n\n    changeSortType() {\n      if (this.sortType == \"asc\") this.sortType = \"desc\";\n      else this.sortType = \"asc\";\n    },\n\n    sortBy(value) {\n      if (this.sortType == \"asc\") this.sortType = \"desc\";\n      else this.sortType = \"asc\";\n\n      this.sortByValue = value;\n      this.reloadTriggers();\n    }\n  },\n  directives: {\n    ClickOutside\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  margin-top: 0px;\n  width: 200px;\n  float: left;\n}\n#header {\n  margin-left: 15px;\n  margin-right: 10px;\n  display: block;\n  width: 99%;\n  float: right;\n  background-color: white;\n}\n#pic {\n  border-radius: 50%;\n  float: right;\n  margin-top: 0px;\n}\n#slika {\n  margin-top: 0px;\n  float: right;\n}\n#divlist {\n  width: 100%;\n  height: 100vh;\n}\n\nbody {\n  font-family: \"Lato\", sans-serif;\n  background: #eaeaea;\n}\n\n#Triggers {\n  height: 100vh;\n  padding: 20px;\n  padding-bottom: 0px;\n  width: 100%;\n}\n\n.column1 {\n  width: 31.5%;\n  margin-right: 15px;\n}\n\n.column2 {\n  width: 8%;\n  margin-left: 32px;\n}\n\n.column3 {\n  width: 8%;\n  margin-right: 20px;\n  margin-left: 20px;\n}\n\n.column5 {\n  width: 5%;\n}\n\n.column4 {\n  width: 40%;\n}\n\n.linear1 {\n  width: 88px;\n  left: 32%;\n}\n\n.linear2 {\n  left: 50%;\n}\n\n#btn {\n  float: right;\n  height: 60px;\n  width: 60px;\n  border-radius: 50%;\n  font-size: 30px;\n  position: absolute;\n  bottom: 50px;\n  right: 13px;\n  background-color: #006bf5;\n  color: white;\n  border: 1px solid white;\n  font-family: \"Courier New\", Courier, monospace;\n  line-height: 60px;\n  z-index: 99;\n}\n\n#btn:hover {\n  cursor: pointer;\n}\n\n#footer {\n  position: absolute;\n  bottom: -10px;\n  width: calc(93% - 20px);\n  margin-right: 20px;\n}\n</style>\n"]}]}