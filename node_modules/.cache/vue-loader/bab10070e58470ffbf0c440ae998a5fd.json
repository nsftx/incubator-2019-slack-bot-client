{"remainingRequest":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/newsmay/Desktop/NewFolder/novi/src/components/FormTrigger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/newsmay/Desktop/NewFolder/novi/src/components/FormTrigger.vue","mtime":1566221919000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/cache-loader/dist/cjs.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/babel-loader/lib/index.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vuetify-loader/lib/loader.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/cache-loader/dist/cjs.js","mtime":1565775065000},{"path":"/home/newsmay/Desktop/NewFolder/novi/node_modules/vue-loader/lib/index.js","mtime":1565775065000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"../constants\";\n\nexport default {\n  name: \"formaT\",\n  data() {\n    return {\n      messagesData: [],\n      channelsData: [],\n      targetMess: \"\",\n      messageTitle: \"Some message title\",\n      triggerType: \"Some trigger type\",\n      channelName: \"Some channel name\",\n      active: false,\n      formType: \"Create\",\n      messId: \"\",\n      liveValidation: false,\n      showTitleError: false,\n      showTriggerError: false,\n      showChannelError: false,\n      showMessageOption: true\n    };\n  },\n  mounted: async function() {\n    if (this.$route.params.id != null) {\n      var currentR = this.$router.currentRoute.fullPath;\n      var path = currentR.substring(0, 30);\n\n      if (path == \"/dashboard/messages/newTrigger\") {\n        try {\n          const res = await axios.get(\n            API_BASE_URL + \"/api/messages/\" + this.$route.params.id\n          );\n          this.messagesData = res.data;\n          this.messageTitle = this.messagesData.title;\n          this.showMessageOption = false;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      } else {\n        this.formType = \"Update\";\n\n        var res;\n        try {\n          res = await axios.get(\n            API_BASE_URL + \"/api/triggers/\" + this.$route.params.id\n          );\n          this.messageTitle = res.data.message.title;\n          this.channelName = res.data.channel;\n          this.active = res.data.active;\n          this.triggerType = res.data.triggerType;\n          this.messId = res.data.message.messageId;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n        try {\n          const resM = await axios.get(API_BASE_URL + \"/api/messages\");\n          this.messagesData = resM.data.content;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      }\n    } else {\n      try {\n        const res = await axios.get(API_BASE_URL + \"/api/messages\");\n        this.messagesData = res.data.content;\n      } catch (err) {\n        this.$emit(\"show-notification\", -1);\n      }\n    }\n    try {\n      //Aplikacija nije povezana sa listom kanala\n      const res = await axios.get(API_BASE_URL + \"/api/channels\");\n      this.channelsData = [{ name: \"#general\" }, { name: \"#incubator\" }];\n    } catch (err) {\n      this.$emit(\"show-notification\", -1);\n    }\n  },\n\n  watch: {\n    messageTitle(value) {\n      this.messageTitle = value;\n      if (this.liveValidation == true) this.check_messageTitle(value);\n    },\n\n    triggerType(value) {\n      this.triggerType = value;\n      if (this.liveValidation == true) this.check_triggerType(value);\n    },\n\n    channelName(value) {\n      this.channelName = value;\n      if (this.liveValidation == true) this.check_channelName(value);\n    }\n  },\n\n  methods: {\n    exit() {\n      this.$router.go(-1);\n    },\n\n    check_messageTitle(value) {\n      if (this.messageTitle == \"Some message title\") {\n        this.showTitleError = true;\n        return false;\n      } else {\n        this.showTitleError = false;\n        return true;\n      }\n    },\n\n    check_triggerType(value) {\n      if (this.triggerType == \"Some trigger type\") {\n        this.showTriggerError = true;\n        return false;\n      } else {\n        this.showTriggerError = false;\n        return true;\n      }\n    },\n\n    check_channelName(value) {\n      if (this.channelName == \"Some channel name\") {\n        this.showChannelError = true;\n        return false;\n      } else {\n        this.showChannelError = false;\n        return true;\n      }\n    },\n\n    async save() {\n      this.liveValidation = true;\n      if (this.check_messageTitle(this.messageTitle) == false)\n        this.invalid = true;\n      if (this.check_triggerType(this.triggerType) == false)\n        this.invalid = true;\n      if (this.check_channelName(this.channelName) == false)\n        this.invalid = true;\n      if (this.invalid == true) {\n        this.invalid = false;\n        return;\n      }\n\n      if (this.$route.params.id != null) {\n        var cr = this.$router.currentRoute.fullPath;\n        var path = cr.substring(0, 30);\n\n        if (path == \"/dashboard/messages/newTrigger\") {\n          try {\n            await axios.post(API_BASE_URL + \"/api/triggers\", {\n              channel: this.channelName,\n              triggerType: this.triggerType,\n              active: this.active,\n              messageId: this.$route.params.id\n            });\n            this.$emit(\"show-notification\");\n          } catch (err) {\n            this.$emit(\"show-notification\", -1);\n          }\n        } else {\n          try {\n            const res = await axios.get(API_BASE_URL + \"/api/messages\");\n            this.messagesData = res.data.content;\n\n            await axios.put(\n              API_BASE_URL + \"/api/triggers/\" + this.$route.params.id,\n              {\n                channel: this.channelName,\n                triggerType: this.triggerType,\n                active: this.active,\n                messageId: this.messId\n              }\n            );\n            this.$emit(\"show-notification\");\n          } catch (err) {\n            this.$emit(\"show-notification\", -1);\n          }\n        }\n      } else {\n        try {\n          await axios.post(API_BASE_URL + \"/api/triggers\", {\n            active: this.active,\n            channel: this.channelName,\n            messageId: this.messId,\n            triggerType: this.triggerType\n          });\n          this.$emit(\"show-notification\");\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      }\n      this.$emit(\"reload-triggers\");\n      this.$router.go(-1);\n    },\n    getMessageID() {\n      if (this.messagesData.length > 1) {\n        this.targetMess = this.messagesData.filter(\n          mess => mess.title == this.messageTitle\n        );\n        this.messId = this.targetMess[0].messageId;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["FormTrigger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FormTrigger.vue","sourceRoot":"src/components","sourcesContent":["\n<template>\n  <div id=\"formaT\">\n    <div class=\"form-style-10\">\n      <form id=\"forma\">\n        <div class=\"section\">\n          <p>\n            {{ formType }} Trigger\n            <label id=\"close-icon\" @click=\"exit\">x</label>\n          </p>\n        </div>\n        <div class=\"inner-wrap\">\n          <label class=\"la\">Message</label>\n\n          <select\n            id=\"field1\"\n            class=\"border\"\n            v-model=\"messageTitle\"\n            @click=\"getMessageID\"\n            :class=\"{errorBorder: showTitleError, noErrorBorder: !showTitleError}\"\n          >\n            <option disabled selected>{{ messageTitle }}</option>\n            <option\n              v-for=\"message in messagesData\"\n              :key=\"message.messageId\"\n              v-show=\"showMessageOption\"\n            >{{ message.title }}</option>\n          </select>\n\n          <span v-show=\"showTitleError\">Message title is required</span>\n          <br />\n\n          <label class=\"la\">Trigger</label>\n          <select\n            id=\"field2\"\n            class=\"border\"\n            v-model=\"triggerType\"\n            :class=\"{errorBorder: showTriggerError, noErrorBorder: !showTriggerError}\"\n          >\n            <option disabled selected>Some trigger type</option>\n            <option>On channel join</option>\n          </select>\n\n          <span v-show=\"showTriggerError\">Trigger type is required</span>\n          <br />\n          <br />\n          <label class=\"la\">Channel name</label>\n          <select\n            id=\"field3\"\n            class=\"border\"\n            v-model=\"channelName\"\n            :class=\"{errorBorder: showChannelError, noErrorBorder: !showChannelError}\"\n          >\n            <option disabled selected>Some channel name</option>\n            <option v-for=\"channel in channelsData\" :key=\"channel.name\">{{ channel.name }}</option>\n          </select>\n\n          <span v-show=\"showChannelError\">Channel name is required</span>\n          <br />\n          <br />\n\n          <label class=\"container\">\n            <p class=\"checkText\">Active</p>\n            <input type=\"checkbox\" checked=\"checked\" v-model=\"active\" />\n            <span class=\"checkmark\"></span>\n          </label>\n          <br />\n          <br />\n          <input type=\"button\" value=\"Save\" id=\"submit\" @click=\"save\" />\n          <input type=\"button\" value=\"Cancel\" @click=\"exit\" />\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"../constants\";\n\nexport default {\n  name: \"formaT\",\n  data() {\n    return {\n      messagesData: [],\n      channelsData: [],\n      targetMess: \"\",\n      messageTitle: \"Some message title\",\n      triggerType: \"Some trigger type\",\n      channelName: \"Some channel name\",\n      active: false,\n      formType: \"Create\",\n      messId: \"\",\n      liveValidation: false,\n      showTitleError: false,\n      showTriggerError: false,\n      showChannelError: false,\n      showMessageOption: true\n    };\n  },\n  mounted: async function() {\n    if (this.$route.params.id != null) {\n      var currentR = this.$router.currentRoute.fullPath;\n      var path = currentR.substring(0, 30);\n\n      if (path == \"/dashboard/messages/newTrigger\") {\n        try {\n          const res = await axios.get(\n            API_BASE_URL + \"/api/messages/\" + this.$route.params.id\n          );\n          this.messagesData = res.data;\n          this.messageTitle = this.messagesData.title;\n          this.showMessageOption = false;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      } else {\n        this.formType = \"Update\";\n\n        var res;\n        try {\n          res = await axios.get(\n            API_BASE_URL + \"/api/triggers/\" + this.$route.params.id\n          );\n          this.messageTitle = res.data.message.title;\n          this.channelName = res.data.channel;\n          this.active = res.data.active;\n          this.triggerType = res.data.triggerType;\n          this.messId = res.data.message.messageId;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n        try {\n          const resM = await axios.get(API_BASE_URL + \"/api/messages\");\n          this.messagesData = resM.data.content;\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      }\n    } else {\n      try {\n        const res = await axios.get(API_BASE_URL + \"/api/messages\");\n        this.messagesData = res.data.content;\n      } catch (err) {\n        this.$emit(\"show-notification\", -1);\n      }\n    }\n    try {\n      //Aplikacija nije povezana sa listom kanala\n      const res = await axios.get(API_BASE_URL + \"/api/channels\");\n      this.channelsData = [{ name: \"#general\" }, { name: \"#incubator\" }];\n    } catch (err) {\n      this.$emit(\"show-notification\", -1);\n    }\n  },\n\n  watch: {\n    messageTitle(value) {\n      this.messageTitle = value;\n      if (this.liveValidation == true) this.check_messageTitle(value);\n    },\n\n    triggerType(value) {\n      this.triggerType = value;\n      if (this.liveValidation == true) this.check_triggerType(value);\n    },\n\n    channelName(value) {\n      this.channelName = value;\n      if (this.liveValidation == true) this.check_channelName(value);\n    }\n  },\n\n  methods: {\n    exit() {\n      this.$router.go(-1);\n    },\n\n    check_messageTitle(value) {\n      if (this.messageTitle == \"Some message title\") {\n        this.showTitleError = true;\n        return false;\n      } else {\n        this.showTitleError = false;\n        return true;\n      }\n    },\n\n    check_triggerType(value) {\n      if (this.triggerType == \"Some trigger type\") {\n        this.showTriggerError = true;\n        return false;\n      } else {\n        this.showTriggerError = false;\n        return true;\n      }\n    },\n\n    check_channelName(value) {\n      if (this.channelName == \"Some channel name\") {\n        this.showChannelError = true;\n        return false;\n      } else {\n        this.showChannelError = false;\n        return true;\n      }\n    },\n\n    async save() {\n      this.liveValidation = true;\n      if (this.check_messageTitle(this.messageTitle) == false)\n        this.invalid = true;\n      if (this.check_triggerType(this.triggerType) == false)\n        this.invalid = true;\n      if (this.check_channelName(this.channelName) == false)\n        this.invalid = true;\n      if (this.invalid == true) {\n        this.invalid = false;\n        return;\n      }\n\n      if (this.$route.params.id != null) {\n        var cr = this.$router.currentRoute.fullPath;\n        var path = cr.substring(0, 30);\n\n        if (path == \"/dashboard/messages/newTrigger\") {\n          try {\n            await axios.post(API_BASE_URL + \"/api/triggers\", {\n              channel: this.channelName,\n              triggerType: this.triggerType,\n              active: this.active,\n              messageId: this.$route.params.id\n            });\n            this.$emit(\"show-notification\");\n          } catch (err) {\n            this.$emit(\"show-notification\", -1);\n          }\n        } else {\n          try {\n            const res = await axios.get(API_BASE_URL + \"/api/messages\");\n            this.messagesData = res.data.content;\n\n            await axios.put(\n              API_BASE_URL + \"/api/triggers/\" + this.$route.params.id,\n              {\n                channel: this.channelName,\n                triggerType: this.triggerType,\n                active: this.active,\n                messageId: this.messId\n              }\n            );\n            this.$emit(\"show-notification\");\n          } catch (err) {\n            this.$emit(\"show-notification\", -1);\n          }\n        }\n      } else {\n        try {\n          await axios.post(API_BASE_URL + \"/api/triggers\", {\n            active: this.active,\n            channel: this.channelName,\n            messageId: this.messId,\n            triggerType: this.triggerType\n          });\n          this.$emit(\"show-notification\");\n        } catch (err) {\n          this.$emit(\"show-notification\", -1);\n        }\n      }\n      this.$emit(\"reload-triggers\");\n      this.$router.go(-1);\n    },\n    getMessageID() {\n      if (this.messagesData.length > 1) {\n        this.targetMess = this.messagesData.filter(\n          mess => mess.title == this.messageTitle\n        );\n        this.messId = this.targetMess[0].messageId;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n* {\n  font-family: \"Roboto\", sans-serif;\n}\n\n#formaT {\n  width: 640px;\n  height: 480px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  background-color: white;\n  padding: 10px;\n  z-index: 99;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n#form-style-10 {\n  width: 40%;\n  height: auto;\n  padding: 20px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  background: #fff;\n  overflow: hidden;\n  box-sizing: border-box;\n  display: block;\n  z-index: 99;\n}\n.form-style-10 .inner-wrap {\n  height: auto;\n  display: block;\n  padding: 0 20px 20px 20px;\n  background: #fff;\n  border-radius: 6px;\n  margin-bottom: 15px;\n}\n\n.form-style-10 label {\n  font: 13px Arial, Helvetica, sans-serif;\n  color: #888;\n  margin-bottom: 15px;\n}\n.form-style-10 select {\n  color: #222222;\n  font: 13px Arial, Helvetica, sans-serif;\n  font-weight: 400;\n}\n.form-style-10 input[type=\"text\"],\n.form-style-10 select,\n.form-style-10 input[type=\"datetime\"],\n.form-style-10 input[type=\"email\"],\n.form-style-10 input[type=\"number\"],\n.form-style-10 input[type=\"search\"],\n.form-style-10 input[type=\"time\"],\n.form-style-10 input[type=\"url\"],\n.form-style-10 input[type=\"password\"],\n.form-style-10 textarea,\n.form-style-10 select {\n  padding-top: 10px;\n  overflow: none;\n  margin-bottom: 15px;\n  display: block;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  width: 100%;\n  height: 40%;\n  padding: 8px;\n  border-radius: 6px;\n  -webkit-border-radius: 6px;\n  -moz-border-radius: 6px;\n  font-size: 15px;\n}\n\n.form-style-10 .section {\n  font: normal 23px \"Bitter\", serif;\n  padding-left: 20px;\n}\n\n.form-style-10 .section p {\n  height: 20%;\n  width: 100%;\n  font-weight: bold;\n  color: black;\n  margin-top: 18px;\n  margin-bottom: 25px;\n}\n\n.form-style-10 #submit {\n  float: right;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  width: 20%;\n  height: 30%;\n  overflow: hidden;\n  background: #0080ff;\n  padding: 8px 20px 8px 20px;\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n  font: normal 30px \"Bitter\", serif;\n  border: 1px solid #0080ff;\n  font-size: 15px;\n}\n\n.form-style-10 #submit:hover {\n  background: darkblue;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n}\n\n.form-style-10 input[type=\"button\"] {\n  margin-right: 35px;\n  float: right;\n  padding: 8px 8px 8px 8px;\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  color: #4d4d4d;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n  font: normal 30px \"Bitter\", serif;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  border: 1px solid #257c9e;\n  font-size: 15px;\n  border: none;\n  background: #fff;\n  text-align: center;\n}\n\n.form-style-10 input[type=\"submit\"]:hover {\n  background: darkblue;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n}\n\n.form-style-10 .privacy-policy {\n  float: right;\n  width: 250px;\n  font: 12px Arial, Helvetica, sans-serif;\n  color: #4d4d4d;\n  margin-top: 10px;\n  text-align: right;\n}\n\n#textarea {\n  display: block;\n  overflow: none;\n  height: 100%;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n#close-icon {\n  font-size: 25px;\n  display: inline;\n  text-align: right;\n  float: right;\n  margin: 0 20px 10px 0px;\n}\n\n#close-icon:hover {\n  cursor: pointer;\n}\n\n.la {\n  position: relative;\n  top: 7px;\n  left: 10px;\n  text-align: center;\n  padding: 0px 7px;\n  background-color: white;\n}\n\nspan {\n  color: rgb(253, 38, 38);\n  font-weight: 400;\n}\n\n.errorBorder {\n  border: 1px inset rgb(253, 38, 38);\n}\n\n.noErrorBorder {\n  border: 1px inset rgba(0, 0, 0, 0.2);\n}\n\n.checkText {\n  position: relative;\n  left: 45px;\n  bottom: 5px;\n}\n\n.container {\n  display: block;\n  position: relative;\n  padding-left: 35px;\n  margin-bottom: 12px;\n  cursor: pointer;\n  font-size: 22px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  -webkit-box-flex: 1;\n  -ms-flex: 1 1 100%;\n  flex: 1 1 100%;\n  padding: 0px;\n  width: 100%;\n}\n\n/* Hide the browser's default checkbox */\n.container input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n/* Create a custom checkbox */\n.checkmark {\n  position: absolute;\n  top: -5px;\n  left: 8px;\n  height: 15px;\n  width: 15px;\n  background-color: white;\n  border: 2px solid grey;\n}\n\n/* On mouse-over, add a grey background color */\n.container:hover input ~ .checkmark {\n  background-color: rgb(235, 228, 228);\n}\n\n/* When the checkbox is checked, add a blue background */\n.container input:checked ~ .checkmark {\n  background-color: #2196f3;\n  border-color: #2196f3;\n}\n\n/* Create the checkmark/indicator (hidden when not checked) */\n.checkmark:after {\n  content: \"\";\n  margin-left: 3px;\n  display: none;\n  text-align: center;\n}\n\n/* Show the checkmark when checked */\n.container input:checked ~ .checkmark:after {\n  display: block;\n}\n\n/* Style the checkmark/indicator */\n.container .checkmark:after {\n  left: 9px;\n  top: 5px;\n  width: 5px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  -webkit-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n</style>"]}]}