{"remainingRequest":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/babel-loader/lib/index.js!/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/vuetify-loader/lib/loader.js!/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/newsmay/Desktop/incubator-2019-slack-bot-client/src/components/FormTrigger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/src/components/FormTrigger.vue","mtime":1565784188390},{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/cache-loader/dist/cjs.js","mtime":1565775065128},{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/babel-loader/lib/index.js","mtime":1565775065104},{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/vuetify-loader/lib/loader.js","mtime":1565775065884},{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/cache-loader/dist/cjs.js","mtime":1565775065128},{"path":"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/vue-loader/lib/index.js","mtime":1565775065856}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/newsmay/Desktop/incubator-2019-slack-bot-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"../constants\";\nexport default {\n  name: \"formaT\",\n  data: function data() {\n    return {\n      messagesData: [],\n      channelsData: [],\n      targetMess: \"\",\n      messageTitle: \"Some message title\",\n      triggerType: \"Some trigger type\",\n      channelName: \"Some channel name\",\n      active: false,\n      formType: \"Create\",\n      messId: \"\",\n      liveValidation: false,\n      showTitleError: false,\n      showTriggerError: false,\n      showChannelError: false,\n      showMessageOption: true\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var currentR, path, _res, res, resM, _res2, _res3;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.$route.params.id != null)) {\n                _context.next = 45;\n                break;\n              }\n\n              currentR = this.$router.currentRoute.fullPath;\n              path = currentR.substring(0, 30);\n\n              if (!(path == \"/dashboard/messages/newTrigger\")) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.prev = 4;\n              _context.next = 7;\n              return axios.get(API_BASE_URL + \"/api/messages/\" + this.$route.params.id);\n\n            case 7:\n              _res = _context.sent;\n              this.messagesData = _res.data;\n              this.messageTitle = this.messagesData.title;\n              this.showMessageOption = false;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](4);\n              this.$emit(\"show-notification\", -1);\n\n            case 16:\n              _context.next = 43;\n              break;\n\n            case 18:\n              this.formType = \"Update\";\n              _context.prev = 19;\n              _context.next = 22;\n              return axios.get(API_BASE_URL + \"/api/triggers/\" + this.$route.params.id);\n\n            case 22:\n              res = _context.sent;\n              this.messageTitle = res.data.message.title;\n              this.channelName = res.data.channel;\n              this.active = res.data.active;\n              this.triggerType = res.data.triggerType;\n              this.messId = res.data.message.messageId;\n              _context.next = 33;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t1 = _context[\"catch\"](19);\n              this.$emit(\"show-notification\", -1);\n\n            case 33:\n              _context.prev = 33;\n              _context.next = 36;\n              return axios.get(API_BASE_URL + \"/api/messages\");\n\n            case 36:\n              resM = _context.sent;\n              this.messagesData = resM.data.content;\n              _context.next = 43;\n              break;\n\n            case 40:\n              _context.prev = 40;\n              _context.t2 = _context[\"catch\"](33);\n              this.$emit(\"show-notification\", -1);\n\n            case 43:\n              _context.next = 55;\n              break;\n\n            case 45:\n              _context.prev = 45;\n              _context.next = 48;\n              return axios.get(API_BASE_URL + \"/api/messages\");\n\n            case 48:\n              _res2 = _context.sent;\n              this.messagesData = _res2.data.content;\n              _context.next = 55;\n              break;\n\n            case 52:\n              _context.prev = 52;\n              _context.t3 = _context[\"catch\"](45);\n              this.$emit(\"show-notification\", -1);\n\n            case 55:\n              _context.prev = 55;\n              _context.next = 58;\n              return axios.get(API_BASE_URL + \"/api/channels\");\n\n            case 58:\n              _res3 = _context.sent;\n              this.channelsData = [{\n                name: \"#general\"\n              }, {\n                name: \"#incubator\"\n              }];\n              _context.next = 65;\n              break;\n\n            case 62:\n              _context.prev = 62;\n              _context.t4 = _context[\"catch\"](55);\n              this.$emit(\"show-notification\", -1);\n\n            case 65:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[4, 13], [19, 30], [33, 40], [45, 52], [55, 62]]);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  watch: {\n    messageTitle: function messageTitle(value) {\n      this.messageTitle = value;\n      if (this.liveValidation == true) this.check_messageTitle(value);\n    },\n    triggerType: function triggerType(value) {\n      this.triggerType = value;\n      if (this.liveValidation == true) this.check_triggerType(value);\n    },\n    channelName: function channelName(value) {\n      this.channelName = value;\n      if (this.liveValidation == true) this.check_channelName(value);\n    }\n  },\n  methods: {\n    exit: function exit() {\n      this.$router.go(-1);\n    },\n    check_messageTitle: function check_messageTitle(value) {\n      if (this.messageTitle == \"Some message title\") {\n        this.showTitleError = true;\n        return false;\n      } else {\n        this.showTitleError = false;\n        return true;\n      }\n    },\n    check_triggerType: function check_triggerType(value) {\n      if (this.triggerType == \"Some trigger type\") {\n        this.showTriggerError = true;\n        return false;\n      } else {\n        this.showTriggerError = false;\n        return true;\n      }\n    },\n    check_channelName: function check_channelName(value) {\n      if (this.channelName == \"Some channel name\") {\n        this.showChannelError = true;\n        return false;\n      } else {\n        this.showChannelError = false;\n        return true;\n      }\n    },\n    save: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var cr, path, res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.liveValidation = true;\n                if (this.check_messageTitle(this.messageTitle) == false) this.invalid = true;\n                if (this.check_triggerType(this.triggerType) == false) this.invalid = true;\n                if (this.check_channelName(this.channelName) == false) this.invalid = true;\n\n                if (!(this.invalid == true)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.invalid = false;\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                if (!(this.$route.params.id != null)) {\n                  _context2.next = 37;\n                  break;\n                }\n\n                cr = this.$router.currentRoute.fullPath;\n                path = cr.substring(0, 30);\n\n                if (!(path == \"/dashboard/messages/newTrigger\")) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                _context2.prev = 11;\n                _context2.next = 14;\n                return axios.post(API_BASE_URL + \"/api/triggers\", {\n                  channel: this.channelName,\n                  triggerType: this.triggerType,\n                  active: this.active,\n                  messageId: this.$route.params.id\n                });\n\n              case 14:\n                this.$emit(\"show-notification\");\n                _context2.next = 20;\n                break;\n\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](11);\n                this.$emit(\"show-notification\", -1);\n\n              case 20:\n                _context2.next = 35;\n                break;\n\n              case 22:\n                _context2.prev = 22;\n                _context2.next = 25;\n                return axios.get(API_BASE_URL + \"/api/messages\");\n\n              case 25:\n                res = _context2.sent;\n                this.messagesData = res.data.content;\n                _context2.next = 29;\n                return axios.put(API_BASE_URL + \"/api/triggers/\" + this.$route.params.id, {\n                  channel: this.channelName,\n                  triggerType: this.triggerType,\n                  active: this.active,\n                  messageId: this.messId\n                });\n\n              case 29:\n                this.$emit(\"show-notification\");\n                _context2.next = 35;\n                break;\n\n              case 32:\n                _context2.prev = 32;\n                _context2.t1 = _context2[\"catch\"](22);\n                this.$emit(\"show-notification\", -1);\n\n              case 35:\n                _context2.next = 46;\n                break;\n\n              case 37:\n                _context2.prev = 37;\n                _context2.next = 40;\n                return axios.post(API_BASE_URL + \"/api/triggers\", {\n                  active: this.active,\n                  channel: this.channelName,\n                  messageId: this.messId,\n                  triggerType: this.triggerType\n                });\n\n              case 40:\n                this.$emit(\"show-notification\");\n                _context2.next = 46;\n                break;\n\n              case 43:\n                _context2.prev = 43;\n                _context2.t2 = _context2[\"catch\"](37);\n                this.$emit(\"show-notification\", -1);\n\n              case 46:\n                this.$emit(\"reload-triggers\");\n                this.$router.go(-1);\n\n              case 48:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[11, 17], [22, 32], [37, 43]]);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    getMessageID: function getMessageID() {\n      var _this = this;\n\n      if (this.messagesData.length > 1) {\n        this.targetMess = this.messagesData.filter(function (mess) {\n          return mess.title == _this.messageTitle;\n        });\n        this.messId = this.targetMess[0].messageId;\n      }\n    }\n  }\n};",{"version":3,"sources":["FormTrigger.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n\n<div id=\"formaT\">\n    <div class=\"form-style-10\">\n<form id=\"forma\">\n    <div class=\"section\">  <p>{{ formType }} Trigger <label id=\"close-icon\" @click=\"exit\"> x </label> </p> </div>\n    <div class=\"inner-wrap\">\n        <label class=\"la\">Message</label>\n\n        <select id=\"field1\" class=\"border\" v-model=\"messageTitle\" @click=\"getMessageID\" :class=\"{errorBorder: showTitleError, noErrorBorder: !showTitleError}\"> \n            \n            <option disabled selected >{{ messageTitle }}</option>\n            <option v-for=\"message in messagesData\" :key=\"message.messageId\" v-show=\"showMessageOption\"> {{ message.title }} </option>\n            \n        </select>\n\n        <span v-show=\"showTitleError\">Message title is required</span>\n        <br>\n\n        <label class=\"la\"> Trigger </label>  \n        <select  id=\"field2\" class=\"border\"  v-model=\"triggerType\" :class=\"{errorBorder: showTriggerError, noErrorBorder: !showTriggerError}\"> \n            <option disabled selected >Some trigger type</option>\n            <option>On channel join</option>\n        </select>\n\n        <span v-show=\"showTriggerError\">Trigger type is required</span>\n        <br>\n        <br>\n\n        <select id=\"field3\" class=\"border\"  v-model=\"channelName\" :class=\"{errorBorder: showChannelError, noErrorBorder: !showChannelError}\"> \n            <option disabled selected >Some channel name</option>\n            <option v-for=\"channel in channelsData\" :key=\"channel.name\"> {{ channel.name }} </option>\n        </select>\n\n        <span v-show=\"showChannelError\">Channel name is required</span>\n        <br>\n        <br>\n\n        <label class=\"container\"> <p class=\"checkText\">Active</p>\n            <input type=\"checkbox\" checked=\"checked\" v-model=\"active\">\n            <span class=\"checkmark\"></span>\n        </label>\n    <br>\n    <br>\n        <input type=\"button\" value=\"Save\" id=\"submit\" @click=\"save\"/>\n        <input type=\"button\" value=\"Cancel\" @click=\"exit\" />\n</div>\n</form>\n</div>\n</div>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport { API_BASE_URL } from '../constants';\n\nexport default {\n    name: \"formaT\",\n    data(){\n        return{\n            messagesData: [],\n            channelsData: [],\n            targetMess: \"\",\n            messageTitle: \"Some message title\",\n            triggerType: \"Some trigger type\",\n            channelName: \"Some channel name\",\n            active: false,\n            formType: \"Create\",\n            messId: \"\",\n            liveValidation: false,\n            showTitleError: false,\n            showTriggerError: false,\n            showChannelError: false,\n            showMessageOption: true\n        }\n    },\n    mounted: async function()\n    {\n        if (this.$route.params.id != null) \n        {\n\n            var currentR = this.$router.currentRoute.fullPath;\n            var path = currentR.substring(0, 30);\n\n            if(path == \"/dashboard/messages/newTrigger\")\n            {\n                try\n                {\n                    const res = await axios.get(API_BASE_URL+\"/api/messages/\" + this.$route.params.id);\n                    this.messagesData = res.data;\n                    this.messageTitle = this.messagesData.title;\n                    this.showMessageOption = false;\n                }\n                catch(err)\n                {\n                    this.$emit(\"show-notification\", -1);                    \n                }\n            }\n            else\n            {\n                this.formType = \"Update\";\n\n                var res;\n                try\n                {\n                    res = await axios.get(API_BASE_URL+\"/api/triggers/\" + this.$route.params.id);\n                    this.messageTitle = res.data.message.title;\n                    this.channelName = res.data.channel;\n                    this.active = res.data.active;\n                    this.triggerType = res.data.triggerType;\n                    this.messId = res.data.message.messageId;\n                }\n                catch(err)\n                {\n                    this.$emit(\"show-notification\", -1);         \n                }\n                try\n                {\n                    const resM = await axios.get(API_BASE_URL+\"/api/messages\");\n                    this.messagesData = resM.data.content;\n                }\n                catch(err)\n                {\n                    this.$emit(\"show-notification\", -1);               \n                }\n            }\n        }\n        else\n        {\n            try \n            {\n                const res = await axios.get(API_BASE_URL+\"/api/messages\");\n                this.messagesData = res.data.content;             \n            }\n            catch (err) {\n                this.$emit(\"show-notification\", -1);\n            }\n        }\n        try\n        {\n            //Aplikacija nije povezana sa listom kanala\n            const res = await axios.get(API_BASE_URL+\"/api/channels\");\n            this.channelsData = [{name: \"#general\"}, {name: \"#incubator\"}];\n        }\n        catch(err)\n        {\n            this.$emit(\"show-notification\", -1);\n        }\n    },\n\n    watch: {\n        messageTitle(value) {\n          this.messageTitle = value;\n          if (this.liveValidation == true) this.check_messageTitle(value);\n        },\n\n        triggerType(value) {\n          this.triggerType = value;\n          if (this.liveValidation == true) this.check_triggerType(value);\n        },\n\n        channelName(value){\n            this.channelName = value;\n            if (this.liveValidation == true) this.check_channelName(value);\n        }\n    },\n\n    methods: {\n        exit(){\n            this.$router.go(-1);\n        },\n\n        check_messageTitle(value) \n        {\n            if (this.messageTitle == \"Some message title\") \n            {\n                this.showTitleError = true;\n                return false;\n            } \n            else\n            {\n                this.showTitleError = false;\n                return true;\n            }\n        },\n\n        check_triggerType(value) {\n            if (this.triggerType == \"Some trigger type\") \n            {\n                this.showTriggerError = true;\n                return false;\n            } \n            else {\n                this.showTriggerError = false;\n                return true;\n            }\n        },\n\n        check_channelName(value) {\n            if (this.channelName == \"Some channel name\") \n            {\n                this.showChannelError = true;\n                return false;\n            } \n            else {\n                this.showChannelError = false;\n                return true;\n            }\n        },\n\n        async save(){\n\n            this.liveValidation = true;\n            if (this.check_messageTitle(this.messageTitle) == false) this.invalid = true;\n            if (this.check_triggerType(this.triggerType) == false) this.invalid = true;\n            if (this.check_channelName(this.channelName) == false) this.invalid = true;\n            if (this.invalid == true) \n            {\n                this.invalid = false;\n                return;\n            }\n\n            if(this.$route.params.id != null)\n            {\n                var cr = this.$router.currentRoute.fullPath;\n                var path = cr.substring(0, 30);\n\n                if(path == \"/dashboard/messages/newTrigger\")\n                {\n                    try\n                    {\n                        await axios.post(API_BASE_URL+\"/api/triggers\", {channel: this.channelName, triggerType: this.triggerType, active: this.active, messageId: this.$route.params.id})\n                        this.$emit(\"show-notification\")                    \n                    }\n                    catch(err)\n                    {\n                        this.$emit(\"show-notification\", -1)\n                    }\n                }\n                else\n                {\n                    try\n                    {\n                        const res = await axios.get(API_BASE_URL+\"/api/messages\");\n                        this.messagesData = res.data.content;\n\n                        await axios.put(API_BASE_URL+\"/api/triggers/\" + this.$route.params.id, {channel: this.channelName, triggerType: this.triggerType, active: this.active, messageId: this.messId})\n                        this.$emit(\"show-notification\")                    \n                    }\n                    catch(err)\n                    {\n                        this.$emit(\"show-notification\", -1)\n                    }\n                }\n            }\n            else\n            {\n                try\n                {\n                    await axios.post(API_BASE_URL+\"/api/triggers\", {active: this.active, channel: this.channelName, messageId: this.messId, triggerType:  this.triggerType});\n                    this.$emit(\"show-notification\")\n                }\n                catch(err)\n                {\n                    this.$emit(\"show-notification\", -1);\n                }\n            }\n            this.$emit(\"reload-triggers\");\n            this.$router.go(-1);\n        },\n        getMessageID()\n        {   \n            if(this.messagesData.length>1)\n            {\n                this.targetMess = this.messagesData.filter( mess => mess.title == this.messageTitle);\n                this.messId = this.targetMess[0].messageId;\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n\n*{\n    font-family: 'Roboto', sans-serif;\n}\n\n#formaT{\n    width: 640px;\n    height: 480px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    background-color: white;\n    padding: 10px;\n    z-index: 99;\n\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n#form-style-10{\n    width:40%;\n    height:auto;\n\tpadding:20px;\n\tposition:absolute;\n\ttop:50%;\n\tleft:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\tbackground: #FFF;\n    overflow:hidden;\n    box-sizing:border-box;\n    display:block;\n    z-index: 99;\n}\n.form-style-10 .inner-wrap{\n    height:auto;\n    display:block;\n\tpadding: 0 20px 20px 20px;\n\tbackground: #fff;\n\tborder-radius: 6px;\n\tmargin-bottom: 15px;\n}\n\n.form-style-10 label{\n\tfont: 13px Arial, Helvetica, sans-serif;\n\tcolor: #888;\n\tmargin-bottom: 15px;\n}\n.form-style-10 select{\n    color:#222222;\n    font: 13px Arial, Helvetica, sans-serif;\n    font-weight: 400;\n}\n.form-style-10 input[type=\"text\"],\n.form-style-10 select,\n.form-style-10 input[type=\"datetime\"],\n.form-style-10 input[type=\"email\"],\n.form-style-10 input[type=\"number\"],\n.form-style-10 input[type=\"search\"],\n.form-style-10 input[type=\"time\"],\n.form-style-10 input[type=\"url\"],\n.form-style-10 input[type=\"password\"],\n.form-style-10 textarea,\n.form-style-10 select {\n    padding-top:10px;\n    overflow:none;\n    margin-bottom: 15px;\n\tdisplay: block;\n\tbox-sizing: border-box;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n    width: 100%;\n    height:40%;\n\tpadding: 8px;\n\tborder-radius: 6px;\n\t-webkit-border-radius:6px;\n\t-moz-border-radius:6px;\n    font-size: 15px;\n}\n\n.form-style-10 .section{\n\tfont: normal 23px 'Bitter', serif;\n    padding-left: 20px;\n}\n\n.form-style-10 .section p{\n    height:20%;\n    width:100%;\n    font-weight: bold;\n    color:black;\n    margin-top: 18px;\n    margin-bottom: 25px;\n}\n\n.form-style-10 #submit{\n    float:right;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    width:20%;\n    height:30%;\n    overflow: hidden;\n    background: #0080ff;\n\tpadding: 8px 20px 8px 20px;\n\tborder-radius: 5px;\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tcolor: #fff;\n\ttext-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n\tfont: normal 30px 'Bitter', serif;\n\tborder: 1px solid #0080ff;;\n\tfont-size: 15px;\n} \n\n.form-style-10 #submit:hover{\n    \n\tbackground:darkblue;\n\t-moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n\t-webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n\tbox-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n}\n\n.form-style-10 input[type=\"button\"]{\n    margin-right:35px;\n    float:right;\n    padding: 8px 8px 8px 8px;\n\tborder-radius: 5px;\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tcolor:#4D4D4D;\n\ttext-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n\tfont: normal 30px 'Bitter', serif;\n\t-moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n\t-webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n\tbox-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n\tborder: 1px solid #257C9E;\n\tfont-size: 15px;\n    border:none;\n    background:#fff;\n    text-align:center;\n}\n\n.form-style-10 input[type=\"submit\"]:hover{\n\tbackground:darkblue;\n\t-moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n\t-webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n\tbox-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.28);\n}\n\n.form-style-10 .privacy-policy{\n\tfloat: right;\n\twidth: 250px;\n\tfont: 12px Arial, Helvetica, sans-serif;\n\tcolor: #4D4D4D;\n\tmargin-top: 10px;\n\ttext-align: right;\n}\n\n#textarea{\n    display:block;\n    overflow:none;\n    height:100%;\n    width:100%;\n    margin-bottom: 20px;\n}\n\n#close-icon{\n    font-size: 25px;\n    display:inline;\n    text-align:right;\n    float:right;\n    margin: 0 20px 10px 0px;\n}\n\n#close-icon:hover{\n    cursor: pointer;\n}\n\n.la{\n    position: relative;\n    top: 7px;\n    left: 10px;\n    text-align: center;\n    padding: 0px 7px;\n    background-color: white;\n}\n\nspan {\n  color: rgb(253, 38, 38);\n  font-weight: 400;\n}\n\n.errorBorder {\n    border: 1px inset rgb(253, 38, 38);\n}\n\n.noErrorBorder{\n    border: 1px inset rgba(0, 0, 0, 0.2);\n}\n\n.checkText{\n    position: relative;\n    left: 45px;\n    bottom: 5px;\n}\n\n.container {\n  display: block;\n    position: relative;\n    padding-left: 35px;\n    margin-bottom: 12px;\n    cursor: pointer;\n    font-size: 22px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    -webkit-box-flex: 1;\n    -ms-flex: 1 1 100%;\n    flex: 1 1 100%;\n    padding: 0px;\n    width: 100%;\n}\n\n/* Hide the browser's default checkbox */\n.container input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n/* Create a custom checkbox */\n.checkmark {\n  position: absolute;\n    top: -5px;\n    left: 8px;\n    height: 15px;\n    width: 15px;\n    background-color: white;\n    border: 2px solid grey;\n}\n\n/* On mouse-over, add a grey background color */\n.container:hover input ~ .checkmark {\n  background-color: rgb(235, 228, 228);\n}\n\n/* When the checkbox is checked, add a blue background */\n.container input:checked ~ .checkmark {\n  background-color: #2196F3;\n  border-color: #2196F3;\n}\n\n/* Create the checkmark/indicator (hidden when not checked) */\n.checkmark:after {\n    content: \"\";\n    margin-left: 3px;\n    display: none;\n    text-align: center;\n}\n\n/* Show the checkmark when checked */\n.container input:checked ~ .checkmark:after {\n  display: block;\n}\n\n/* Style the checkmark/indicator */\n.container .checkmark:after {\n  left: 9px;\n  top: 5px;\n  width: 5px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  -webkit-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n\n</style>"],"sourceRoot":"src/components"}]}